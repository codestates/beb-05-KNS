openapi: 3.0.0
info:
  description: This is KNS Project API service.
  version: 1.0.2
  title: KNS - Incentive Community Project
  contact:
    email: rlawkdgks11@gmail.com
servers:
  - url: http://localhost:4000
tags:
  - name: auth
    description: Methods to handle authentication
  - name: user
    description: Methods to access and manage user
  - name: post
    description: Methods to access and manage post
  - name: comment
    description: Methods to access and manage comment
  - name: nft
    description: Methods to access and manage nft
  - name: token
    description: Methods to access and manage token
paths:
  /auth/signup:
    post:
      tags:
        - auth
      summary: 회원가입
      description: 회원 정보를 입력받아서 계정을 만들고 지갑 생성
      operationId: signupUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      responses:
        '201':
          description: 회원가입 되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthApiResponse'
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '409':
          description: 사용자 정보가 이미 존재합니다.
  /auth/login:
    post:
      tags:
        - auth
      summary: 로그인
      description: 로그인
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
          
      responses:
        '200':
          description: 로그인 되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthApiResponse'
        '400':
          description: 올바르지 않은 파라미터 값입니다.
  /auth/logout:
    get:
      tags:
        - auth
      summary: 로그아웃
      description: '로그아웃 refresh token 만료시킴'
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: 로그아웃 되었습니다.

  /user/{userId}:
    get:
      tags:
        - user
      summary: User ID를 받아 마이페이지에서 유저의 상세 정보 응답
      description: |
        유저의 상세 정보 가져오기
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: 사용자 아이디
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApiResponse'
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '404':
          description: 유저 정보가 존재하지 않습니다.
        
  /user/{userId}/post:
    get:
      tags:
        - user
      summary: User ID를 받아 마이페이지에서 유저의 게시글 정보 응답
      description: |
        유저의 게시글 정보 가져오기
      operationId: getPostByUserId
      parameters:
        - name: userId
          in: path
          required: true
          description: 사용자 아이디
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostApiResponse'
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '404':
          description: 조회할 게시글 정보가 없습니다.

  /user/{userId}/nft:
    get:
      tags:
        - user
      summary: User ID를 받아 마이페이지에서 유저의 NFT 정보 응답
      description: |
        유저의 NFT 정보 가져오기
      operationId: getNFTByUserId
      parameters:
        - name: userId
          in: path
          required: true
          description: 사용자 아이디
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFTApiResponse'
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '409':
          description: 조회할 게시글 정보가 없습니다.

  /user/{userId}/faucet:
    put:
      tags:
        - user
      summary: 무료로 이더 0.1 이더 받기(faucet)
      description: NFT 구매, 전송 시 가스비가 들기 때문에 이더 받기 추가
      operationId: getEthFaucet
      parameters:
        - name: userId
          in: path
          required: true
          description: 사용자 아이디
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '404':
          description: 유저 정보가 존재하지 않습니다.

  /post:
    post:
      tags:
        - post
      summary: 게시글 작성
      description: |
        게시글 작성
      operationId: writePost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRegistration'
        required: true
      responses:
        '201':
          description: successful created
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '401':
          description: 인가되지 않은 사용자입니다.
  
    get:
      tags:
        - post
      summary: 전체 게시글 가져오기
      description: |
        등록한 전체 게시글 정보를 가져온다.
      operationId: getAllPosts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAll'
       
  /post/{postId}:
    put:
      tags:
        - post
      summary: 게시글 수정
      description: |
        게시글 수정
      operationId: updatePost
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 아이디
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '403':
          description: 올바른 사용자가 아닙니다.
        '404':
          description: 글번호 몇 번이 존재하지 않습니다.

    delete:
      tags:
        - post
      summary: 게시글 삭제
      description: |
        게시글 삭제
      operationId: deletePost
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 아이디
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '403':
          description: 올바른 사용자가 아닙니다.
        '404':
          description: 글번호 몇 번이 존재하지 않습니다.

    get:
      tags:
        - post
      summary: Post ID를 받아서 해당 게시글 상세 정보 응답
      description: |
        게시글 상세 정보 가져오기
      operationId: getPostById
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 아이디
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostApiResponse'
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '404':
          description: 글번호 몇 번이 존재하지 않습니다.
                
  /post/like/{postId}:
    put:
      tags:
        - post
      summary: 게시글 좋아요 업데이트
      description: |
        게시글 좋아요 업데이트
      operationId: likePost
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 아이디
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '404':
          description: 글번호 몇 번이 존재하지 않습니다.
      
  /post/{postId}/comment:
    post:
      tags:
        - comment
      summary: 댓글 작성
      description: |
        댓글 작성
      operationId: writeComment
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 아이디
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRegistration'
        required: true
      responses:
        '201':
          description: successful created
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '404':
          description: 글번호 몇 번이 존재하지 않습니다.
          
  /post/comment/{commentId}:
    put:
      tags:
        - comment
      summary: 댓글 수정
      description: |
        댓글 수정
      operationId: updateComment
      parameters:
        - name: commentId
          in: path
          required: true
          description: 댓글 아이디
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdate'
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '403':
          description: 올바른 사용자가 아닙니다.

    delete:
      tags:
        - comment
      summary: 댓글 삭제
      description: |
        댓글 삭제
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          required: true
          description: 댓글 아이디
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '403':
          description: 올바른 사용자가 아닙니다.

    get:
      tags:
        - comment
      summary: 댓글 정보 가져오기
      description: |
        댓글 정보 가져오기
      operationId: getCommentById
      parameters:
        - name: commentId
          in: path
          required: true
          description: 댓글 아이디
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '404':
          description: 댓글이 없습니다.
          
  /nft:
    post:
      tags:
        - nft
      summary: NFT 생성
      description: |
        NFT 생성
      operationId: createNFT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NFTCreate'
        required: true
      responses:
        '201':
          description: successful created
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '401':
          description: 인가되지 않은 사용자입니다.
          
    get:
      tags:
        - nft
      summary: 전체 NFT 정보 가져오기
      description: |
        NFT 전체 정보 조회
      operationId: getAllNFT
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFTApiResponse'
                        
  /nft/{nftId}:
    get:
      tags:
        - nft
      summary: nft 아이디로 NFT 정보 가져오기
      description: |
        nft 아이디로 NFT 정보 조회
      operationId: getNFTById
      parameters:
        - name: nftId
          in: path
          required: true
          description: nft Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFTApiResponse'
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '404':
          description: NFT 정보가 존재하지 않습니다.
          
  /nft/{nftId}/transfer:
    put:
      tags:
        - nft
      summary: NFT 전송
      description: |
        NFT 전송
      operationId: transferNFT
      parameters:
        - name: nftId
          in: path
          required: true
          description: 전송할 NFT ID
          schema:
            type: integer
            format: int64
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transferNFT'
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '404':
          description: NFT 전송할 지갑 정보가 없습니다.
          
  /nft/{nftId}/buy:
    put:
      tags:
        - nft
      summary: NFT 구매
      description: |
        NFT 구매
      operationId: buyNFT
      parameters:
        - name: nftId
          in: path
          required: true
          description: 구매할 NFT ID
          schema:
            type: integer
            format: int64
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/buyNFT'
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        
          
  /token/{userId}:
    get:
      tags:
        - token
      summary: 사용자 아이디로 토큰 수량 가져오기
      description: |
        사용자 아이디로 토큰 수량 가져오기
      operationId: geTokenByUserId
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '404':
          description: 사용자 아이디가 존재하지 않습니다.
                
  /token/{userId}/transfer:
    put:
      tags:
        - token
      summary: ERC20 토큰 전송
      description: |
        ERC20 토큰 전송
      operationId: transferToken
      parameters:
        - name: userId
          in: path
          required: true
          description: 토큰 전송할 User ID
          schema:
            type: string
        - name: toUserId
          in: query
          description: 토큰 전송 대상 User ID
          schema:
            type: string
        - name: toTokenAmount
          in: query
          description: 전송할 토큰 수량
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
        '400':
          description: 올바르지 않은 파라미터 값입니다.
        '404':
          description: 토큰 전송할 사용자 정보가 없습니다.
        '409':
          description: 보유 토큰보다 전송할 토큰이 더 많습니다.
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userName:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Creation date
          example: '2021-01-30T08:30:20.000Z'
        address:
          type: string
        tokenAmount:
          type: integer
          format: int32
        ethAmount:
          type: integer
          format: int32
        mnemonicWord:
          type: string
        privateKey:
          type: string
      required:
        - id
        - userName
        - address
        - tokenAmount
        - ethAmount
        - mnemonicWord
        - privateKey
      example: null
    
    UserRegistration:
      type: object
      title: User registration details
      properties:
        userName:
          type: string
        password:
          type: string
          minLength: 5
        address:
          type: string
        tokenAmount:
          type: integer
          format: int32
        ethAmount:
          type: integer
          format: int32
        mnemonicWord:
          type: string
        privateKey:
          type: string
      required:
        - userName
        - password
        - address
        - mnemonicWord
        - privateKey
      example: null
    UserLogin:
      type: object
      title: User Login
      properties:
        userName:
          type: string
        password:
          type: string
          minLength: 5
      required:
        - userName
        - password
      example: null
      
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        userName:
          type: string
        title:
          type: string
        content:
          type: string
        img:
          type: string
        hit:
          type: integer
          format: int32
        like:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
          description: create date
          example: '2021-01-30T08:30:20.000Z'
        updatedAt:
          type: string
          format: date-time
          description: update date
          example: '2021-01-30T08:30:20.000Z'
      required:
        - id
      example: {
                  "status": "successful operation",
                  "data": {
                      "id": 3,
                      "userId": 1,
                      "userName": "dhkim",
                      "title": "kdh",
                      "content": "12345",
                      "img": "",
                      "hit": 0,
                      "like": 0,
                      "createdAt": "2022-08-22T09:57:58.000Z",
                      "postComments": []
                  }
              }

    PostRegistration:
      type: object
      title: Post registration details
      properties:
        userId:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        img:
          type: string
      required:
        - userId
        - title
        - content
      example: null
    PostUpdate:
      type: object
      title: Post update details
      properties:
        title:
          type: string
        content:
          type: string
        img:
          type: string
      required:
        - title
        - content
      example: null
    PostAll:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        userName:
          type: string
        title:
          type: string
        img:
          type: string
        hit:
          type: integer
          format: int32
        like:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
          description: Creation date
          example: '2021-01-30T08:30:20.000Z'
        commentsCount:
          type: integer
          format: int32
      example: null
      
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        postId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        userName:
          type: string
        comment:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Creation date
          example: '2021-01-30T08:30:20.000Z'
      required:
        - id
        - postId
        - userId
        - userName
        - comment
      example: null
    CommentRegistration:
      type: object
      title: Comment registration details
      properties:
        postId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        userName:
          type: string
        comment:
          type: string
      required:
        - postId
        - userId
        - userName
        - content
      example: null
    CommentUpdate:
      type: object
      title: Comment update details
      properties:
        comment:
          type: string
      required:
        - comment
      example: null
    nft:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        tokenId:
          type: string
        tokenName:
          type: string
        desc:
          type: string
        tx_hash:
          type: string
        tokenURI:
          type: string
        img:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Creation date
          example: '2021-01-30T08:30:20.000Z'
        isBuy:
          type: boolean
        Price:
          type: integer
          format: int32
        prevUserId:
          type: string
      required:
        - id
        - userId
        - tokenName
        - img
        - Price
      example: null
    NFTCreate:
      type: object
      title: NFT Create details
      properties:
        userId:
          type: integer
          format: int64
        tokenId:
          type: string
        tokenName:
          type: string
        desc:
          type: string
        tx_hash:
          type: string
        tokenURI:
          type: string
        img:
          type: string
      required:
        - userId
        - tokenId
        - tokenName
        - tokenURI
        - img
        - isBuy
      example: null
    transferNFT:
      type: object
      title: Transfer NFT
      properties:
        address:
          type: string
          
      required:
        - address
        
      example: null

    buyNFT:
      type: object
      title: Buy NFT
      properties:
        userId:
          type: integer
          format: int64
        price: 
          type: integer
          format: int32
          
      required:
        - userId
        - price
      example: null

    token:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        tokenAmount:
          type: integer
          format: int32
      required:
        - userId
        - tokenAmount
      example: null
    AuthApiResponse:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
      required:
        - token
        - username
      example:
        token: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        username: johndoe
    UserApiResponse:
      type: array
      items:
        $ref: '#/components/schemas/User'
      example: null
    PostApiResponse:
      type: array
      items:
        $ref: '#/components/schemas/Post'
      example: null
    NFTApiResponse:
      type: array
      items:
        $ref: '#/components/schemas/nft'
      example: null
    SuccessApiResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
      example:
        message: Success!!
    ErrorApiResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
      example:
        message: Something went wrong 🤪
    NotFoundApiResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
      example:
        message: Not found
